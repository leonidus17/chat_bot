import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode

from random import randint
import requests

word = ['—Å–ª–æ–≤–æ', '–Ω–µ—Ñ—Ç—å', '–º–∞–∑—É—Ç', '–∫—Ä—ã—à–∞', '—á–∞—à–∫–∞', '–¥–æ—Å–∫–∞', '—á–µ—Ö–æ–ª', '–º—ã—à–∫–∞', '—Ç—Ä—É–±–∞', '–¥–∑—é–¥–æ', '–±–∞–π–∫–∞']


def preob(a: list):
    s = ''
    for i in range(len(a)):
        s += a[i]
        s += ' '
    return s


def convert_tuple(c_tuple):
    str = ''
    for i in c_tuple:
        str = str + i
    return str


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

main_dict = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '5 –±—É–∫–≤'!")
    main_dict[update.effective_chat.id] = {'have_stickers': False, 'last_command': '/start',
                                           'game': {'attempt_count': 0, 'otvet': ['*', '*', '*', '*', '*'],
                                                    'guess_word': ' ', 'game_in_progress': False}}
    print(update.effective_chat.id)


async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in main_dict:
        main_dict[update.effective_chat.id] = {'have_stickers': False, 'last_command': '/start_game',
                                               'game': {'attempt_count': 0, 'otvet': ['*', '*', '*', '*', '*'],
                                                        'guess_word': ' ',
                                                        'game_in_progress': True}}
    main_dict[update.effective_chat.id]['game']['otvet'] = ['*', '*', '*', '*', '*']
    if main_dict[update.effective_chat.id]['game']['attempt_count'] > 0:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—á–∞—Ç–∞—è —Å–µ—Å—Å–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π 5 –±—É–∫–≤–æ–π")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à—É –∏–≥—Ä—É! –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π 5 –±—É–∫–≤")
    print(update.effective_chat.id)
    main_dict[update.effective_chat.id]['last_command'] = '/start_game'
    main_dict[update.effective_chat.id]['game']['game_in_progress'] = True
    main_dict[update.effective_chat.id]['game']['attempt_count'] += 1
    main_dict[update.effective_chat.id]['game']['guess_word'] = word[randint(0, len(word) - 1)]
    print(main_dict[update.effective_chat.id])


async def igra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(update.effective_chat.id)
    print(update.effective_chat.id)

    if update.effective_chat.id not in main_dict:
        main_dict[update.effective_chat.id] = {'have_stickers': False, 'last_command': '/start_game',
                                               'game': {'attempt_count': 0, 'otvet': ['*', '*', '*', '*', '*'],
                                                        'guess_word': ' ',
                                                        'game_in_progress': False}}

    if main_dict[update.effective_chat.id]['game']['game_in_progress']:
        text_fin = ''
        dogadka = ''
        text_result = ''
        dogadka = update.message.text
        dogadka = dogadka.lower()

        a = requests.get(
            f"https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20240609T074810Z"
            f".1e88860b7b677d28.596c4c409f867db83c96cbd6973ffccf2db4e4f7&lang=ru-ru&text={dogadka}")
        b = a.json()

        print(b)
        print(dogadka)
        if len(dogadka) == 5 and b['def'] != []:
            dogadka = list(dogadka)
            for i in range(len(dogadka)):
                if dogadka[i] in main_dict[update.effective_chat.id]['game']['guess_word']:
                    if dogadka[i] == main_dict[update.effective_chat.id]['game']['guess_word'][i]:
                        dogadka[i] = f'<b><u>{dogadka[i].upper()}</u></b>'
                    else:
                        dogadka[i]= f'<b>{dogadka[i].upper()}</b>'
            if dogadka == main_dict[update.effective_chat.id]['game']['guess_word']:
                text_result = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º. –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!!üòé'
            else:
                text_result = '–í–≤–µ–¥–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π 5 –±—É–∫–≤'
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text=preob(dogadka)+ '\n'+ text_result, parse_mode="HTML")
            print(preob(dogadka))


        else:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text='–í—ã –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –∏–ª–∏ —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


    else:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ /start_game')


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text='–í –∏–≥—Ä–µ "5 –±—É–∫–≤" –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ø—É—Ç—ë–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤ –¥–ª–∏–Ω–Ω–æ–π 5 –±—É–∫–≤, –∏ –µ—Å–ª–∏ –±—É–∫–≤–∞ –∏–∑ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞')


if __name__ == '__main__':
    application = ApplicationBuilder().token('7476208184:AAHa1qSmJT2qtB2i8cql54NYX44peePVjVU').build()

    start_handler = CommandHandler('start', start)
    start_game_handler = CommandHandler('start_game', start_game)
    igra_handler = MessageHandler(filters.TEXT, igra)

    application.add_handler(start_game_handler)
    application.add_handler(start_handler)
    application.add_handler(igra_handler)

    application.run_polling()
